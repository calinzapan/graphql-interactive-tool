### This file was generated by Nexus Schema
### Do not make changes to this file directly

type API {
  chatRoom: ChatRoom
  id: Int!
  name: String
  owner: User
  pictureUrl: String
  url: String!
}

type AuthPayload {
  accessToken: String
  user: User
}

type ChatRoom {
  api: API
  id: Int!
  messages: [Message]
}

type InvalidUser {
  message: String!
}

union LoginResult = AuthPayload | InvalidUser

type Message {
  content: String!
  id: Int!
  isBotReply: Boolean!
  room: ChatRoom
}

type Mutation {
  addApi(name: String, pictureUrl: String, url: String!): API
  deleteApi(id: Int!): API
  login(email: String!, password: String!): LoginResult
  sendMessage(content: String!, roomId: Int!): Message
  signup(
    email: String!
    firstName: String
    lastName: String
    password: String!
  ): SignupResult
  updateApi(id: Int!, name: String, url: String): API
}

type Query {
  getApi(apiId: Int!): API
  getApiChatRoom(apiId: Int!): ChatRoom
  getChatRoomMessages(roomId: Int!): Message
  getCurrentUser: User
  getUserApis: API
}

union SignupResult = AuthPayload | UserAlreadyExists

type User {
  apis: [API]
  email: String!
  firstName: String
  id: Int!
  lastName: String
}

type UserAlreadyExists {
  message: String!
}
