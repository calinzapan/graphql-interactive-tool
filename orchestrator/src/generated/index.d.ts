/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import type * as prisma from './../../node_modules/.prisma/client/index'
import type { Context as ctx } from './../types'

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {}

export interface NexusGenEnums {}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  API: prisma.API
  AuthPayload: {
    // root type
    accessToken?: string | null // String
    user?: NexusGenRootTypes['User'] | null // User
  }
  ChatRoom: prisma.ChatRoom
  InvalidUser: {
    // root type
    message: string // String!
  }
  Message: prisma.Message
  Mutation: {}
  Query: {}
  User: prisma.User
  UserAlreadyExists: {
    // root type
    message: string // String!
  }
}

export interface NexusGenInterfaces {}

export interface NexusGenUnions {
  LoginResult:
    | NexusGenRootTypes['AuthPayload']
    | NexusGenRootTypes['InvalidUser']
  SignupResult:
    | NexusGenRootTypes['AuthPayload']
    | NexusGenRootTypes['UserAlreadyExists']
}

export type NexusGenRootTypes = NexusGenObjects & NexusGenUnions

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  API: {
    // field return type
    chatRoom: NexusGenRootTypes['ChatRoom'] | null // ChatRoom
    id: number // Int!
    name: string | null // String
    owner: NexusGenRootTypes['User'] | null // User
    pictureUrl: string | null // String
    url: string // String!
  }
  AuthPayload: {
    // field return type
    accessToken: string | null // String
    user: NexusGenRootTypes['User'] | null // User
  }
  ChatRoom: {
    // field return type
    api: NexusGenRootTypes['API'] | null // API
    id: number // Int!
    messages: Array<NexusGenRootTypes['Message'] | null> | null // [Message]
  }
  InvalidUser: {
    // field return type
    message: string // String!
  }
  Message: {
    // field return type
    content: string // String!
    id: number // Int!
    isBotReply: boolean // Boolean!
    room: NexusGenRootTypes['ChatRoom'] | null // ChatRoom
  }
  Mutation: {
    // field return type
    addApi: NexusGenRootTypes['API'] | null // API
    deleteApi: NexusGenRootTypes['API'] | null // API
    login: NexusGenRootTypes['LoginResult'] | null // LoginResult
    sendMessage: NexusGenRootTypes['Message'] | null // Message
    signup: NexusGenRootTypes['SignupResult'] | null // SignupResult
    updateApi: NexusGenRootTypes['API'] | null // API
  }
  Query: {
    // field return type
    getApi: NexusGenRootTypes['API'] | null // API
    getApiChatRoom: NexusGenRootTypes['ChatRoom'] | null // ChatRoom
    getChatRoomMessages: NexusGenRootTypes['Message'] | null // Message
    getCurrentUser: NexusGenRootTypes['User'] | null // User
    getUserApis: NexusGenRootTypes['API'] | null // API
  }
  User: {
    // field return type
    apis: Array<NexusGenRootTypes['API'] | null> | null // [API]
    email: string // String!
    firstName: string | null // String
    id: number // Int!
    lastName: string | null // String
  }
  UserAlreadyExists: {
    // field return type
    message: string // String!
  }
}

export interface NexusGenFieldTypeNames {
  API: {
    // field return type name
    chatRoom: 'ChatRoom'
    id: 'Int'
    name: 'String'
    owner: 'User'
    pictureUrl: 'String'
    url: 'String'
  }
  AuthPayload: {
    // field return type name
    accessToken: 'String'
    user: 'User'
  }
  ChatRoom: {
    // field return type name
    api: 'API'
    id: 'Int'
    messages: 'Message'
  }
  InvalidUser: {
    // field return type name
    message: 'String'
  }
  Message: {
    // field return type name
    content: 'String'
    id: 'Int'
    isBotReply: 'Boolean'
    room: 'ChatRoom'
  }
  Mutation: {
    // field return type name
    addApi: 'API'
    deleteApi: 'API'
    login: 'LoginResult'
    sendMessage: 'Message'
    signup: 'SignupResult'
    updateApi: 'API'
  }
  Query: {
    // field return type name
    getApi: 'API'
    getApiChatRoom: 'ChatRoom'
    getChatRoomMessages: 'Message'
    getCurrentUser: 'User'
    getUserApis: 'API'
  }
  User: {
    // field return type name
    apis: 'API'
    email: 'String'
    firstName: 'String'
    id: 'Int'
    lastName: 'String'
  }
  UserAlreadyExists: {
    // field return type name
    message: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addApi: {
      // args
      name?: string | null // String
      pictureUrl?: string | null // String
      url: string // String!
    }
    deleteApi: {
      // args
      id: number // Int!
    }
    login: {
      // args
      email: string // String!
      password: string // String!
    }
    sendMessage: {
      // args
      content: string // String!
      roomId: number // Int!
    }
    signup: {
      // args
      email: string // String!
      firstName?: string | null // String
      lastName?: string | null // String
      password: string // String!
    }
    updateApi: {
      // args
      id: number // Int!
      name?: string | null // String
      url?: string | null // String
    }
  }
  Query: {
    getApi: {
      // args
      apiId: number // Int!
    }
    getApiChatRoom: {
      // args
      apiId: number // Int!
    }
    getChatRoomMessages: {
      // args
      roomId: number // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
  LoginResult: 'AuthPayload' | 'InvalidUser'
  SignupResult: 'AuthPayload' | 'UserAlreadyExists'
}

export interface NexusGenTypeInterfaces {}

export type NexusGenObjectNames = keyof NexusGenObjects

export type NexusGenInputNames = never

export type NexusGenEnumNames = never

export type NexusGenInterfaceNames = never

export type NexusGenScalarNames = keyof NexusGenScalars

export type NexusGenUnionNames = keyof NexusGenUnions

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never

export type NexusGenAbstractsUsingStrategyResolveType =
  | 'LoginResult'
  | 'SignupResult'

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: ctx
  inputTypes: NexusGenInputs
  rootTypes: NexusGenRootTypes
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars
  argTypes: NexusGenArgTypes
  fieldTypes: NexusGenFieldTypes
  fieldTypeNames: NexusGenFieldTypeNames
  allTypes: NexusGenAllTypes
  typeInterfaces: NexusGenTypeInterfaces
  objectNames: NexusGenObjectNames
  inputNames: NexusGenInputNames
  enumNames: NexusGenEnumNames
  interfaceNames: NexusGenInterfaceNames
  scalarNames: NexusGenScalarNames
  unionNames: NexusGenUnionNames
  allInputTypes:
    | NexusGenTypes['inputNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['scalarNames']
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames']
  allNamedTypes:
    | NexusGenTypes['allInputTypes']
    | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames']
  abstractTypeMembers: NexusGenAbstractTypeMembers
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType
  features: NexusGenFeaturesConfig
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<
    TypeName extends string,
    FieldName extends string
  > {}
  interface NexusGenPluginInputFieldConfig<
    TypeName extends string,
    FieldName extends string
  > {}
  interface NexusGenPluginSchemaConfig {}
  interface NexusGenPluginArgConfig {}
}
